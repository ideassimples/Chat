"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = runTask;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _child_process = require("child_process");

var _which = require("which");

var _which2 = _interopRequireDefault(_which);

var _promise = require("./promise");

var _promise2 = _interopRequireDefault(_promise);

//------------------------------------------------------------------------------
function lookupNpm() {
    var cwd = process.cwd();
    if (lookupNpm.cache[cwd] == null) {
        lookupNpm.cache[cwd] = new _promise2["default"](function (resolve, reject) {
            (0, _which2["default"])("npm", function (err, npmPath) {
                if (err != null) {
                    reject(err);
                } else {
                    resolve(npmPath);
                }
            });
        });
    }
    return lookupNpm.cache[cwd];
}
lookupNpm.cache = Object.create(null);

//------------------------------------------------------------------------------
function isWrapped(s) {
    return s[0] === "\"" && s[s.length - 1] === "\"" || s[0] === "'" && s[s.length - 1] === "'";
}

function makeNpmArgs(task) {
    // eslint-disable-line complexity
    var retv = ["run-script"];

    var start = 0;
    var inSq = false;
    var inDq = false;
    for (var i = 0; i < task.length; ++i) {
        switch (task[i]) {
            case " ":
                if (!inSq && !inDq) {
                    var _s = task.slice(start, i).trim();
                    if (_s.length > 0) {
                        retv.push(_s);
                    }
                    start = i;
                }
                break;

            case "'":
                if (!inDq) {
                    inSq = !inSq;
                }
                break;

            case "\"":
                if (!inSq) {
                    inDq = !inDq;
                }
                break;

            default:
                break;
        }
    }

    var s = task.slice(start).trim();
    if (s.length > 0) {
        retv.push(isWrapped(s) ? s.slice(1, -1) : s);
    }

    return retv;
}

//------------------------------------------------------------------------------
var killTask = (function defineKillTask() {
    if (process.platform === "win32") {
        return function killTask(cp) {
            // eslint-disable-line no-shadow
            (0, _child_process.spawn)("taskkill", ["/F", "/T", "/PID", cp.pid]);
        };
    }

    function lookupChildren(pid, cb) {
        var cp = (0, _child_process.spawn)("ps", ["--no-headers", "--format", "pid", "--ppid", String(pid)]);
        var children = "";

        cp.stdout.setEncoding("utf8");
        cp.stdout.on("data", function (chunk) {
            children += chunk;
        });

        cp.on("error", cb);
        cp.on("close", function () {
            var list = children.split(/\s+/).filter(function (x) {
                return x;
            });
            cb(list);
        });
    }
    return function killTask(cp) {
        // eslint-disable-line no-shadow
        // npm does not forward signals to child processes.
        // We must kill those.
        lookupChildren(cp.pid, function (shPids) {
            var shPid = shPids[0];
            if (!shPid) {
                cp.kill();
            } else {
                lookupChildren(shPid, function (children) {
                    var args = ["-s", "15"].concat(children, [shPid, cp.pid]);
                    (0, _child_process.spawn)("kill", args);
                });
            }
        });
    };
})();

function detectStreamKind(stream, std) {
    return stream == null ? "ignore" : stream !== std ? "pipe" :
    /* else */stream;
}

//------------------------------------------------------------------------------
/**
 * @param {string} task - A task name to run.
 * @param {stream.Readable|null} stdin - A readable stream for stdin of child process.
 * @param {stream.Writable|null} stdout - A writable stream for stdout of child process.
 * @param {stream.Writable|null} stderr - A writable stream for stderr of child process.
 * @returns {Promise}
 *     A promise that becomes fulfilled when task finished.
 *     This promise object has a extra method: `kill()`.
 */

function runTask(task, stdin, stdout, stderr) {
    var cp = null;
    var promise = lookupNpm().then(function (npmPath) {
        return new _promise2["default"](function (resolve, reject) {
            var stdinKind = detectStreamKind(stdin, process.stdin);
            var stdoutKind = detectStreamKind(stdout, process.stdout);
            var stderrKind = detectStreamKind(stderr, process.stderr);

            // Execute.
            cp = (0, _child_process.spawn)(npmPath, makeNpmArgs(task), { stdio: [stdinKind, stdoutKind, stderrKind] });

            // Piping stdio.
            if (stdinKind === "pipe") {
                stdin.pipe(cp.stdin);
            }
            if (stdoutKind === "pipe") {
                cp.stdout.pipe(stdout);
            }
            if (stderrKind === "pipe") {
                cp.stderr.pipe(stderr);
            }

            // Register
            cp.on("error", function (err) {
                cp = null;
                reject(err);
            });
            cp.on("close", function (code) {
                cp = null;
                resolve({ task: task, code: code });
            });
        });
    });

    promise.kill = function kill() {
        if (cp != null) {
            killTask(cp);
        }
    };

    return promise;
}

module.exports = exports["default"];